input {
  file {
    path => "/usr/share/logstash/logs/access.log"
    type => "access"
  }
  file {
    path => "/usr/share/logstash/logs/error.log"
    type => "error"
  }
}

filter {
  if [type] == "access" {
    grok {
      match => { "message" => "%{IP:remote_addr} (?:-|(%{WORD}.%{WORD})) %{USER:remote_user} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:status} (?:%{NUMBER:body_bytes_send}|-) %{QS:http_referrer} %{QS:http_user_agent} %{QS:http_x_forwarded_for}"}
    }
    mutate {
      remove_field => [ "rawrequest", "message", "http_x_forwarded_for", "body_bytes_send", "timestamp", "host" ]
      convert => ["status", "integer"]
      convert => ["timestamp", "string"]
      replace => { "remote_addr" => "103.244.174.150"}
    }
    date {
      match =>  ["timestamp", "MMM dd YYY HH:mm:ss"]
    }
    geoip {
      source => "remote_addr"
    }
  }
  if [type] == "error" {
    grok {
      match => { "message" => '(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER:threadid}\: \*%{NUMBER:connectionid} %{GREEDYDATA:errormessage}, client: %{IP:client}, server: %{GREEDYDATA:server}, request: "%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?'}
    }
    mutate {
      remove_field => [ "timestamp", "connectionid", "threadid", "pid", "severity", "message" ]
      convert => ["timestamp", "string"]
    }
    date {
      match =>  ["timestamp", "yyyy/MM/dd HH:mm:ss"]
    }
  }
}

output {
  stdout {
    codec => rubydebug
  }
  if [type] == "access" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "access_logs"
    }
  }
  if [type] == "error" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "error_logs"
    }
  }
}



